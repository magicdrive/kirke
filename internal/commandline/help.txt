Usage: kirke [OPTIONS] [ARGUMENTS]

Description:
   Kirke is a yet another command-line tool for converting JSON strings into Golang struct definitions.
   Itâ€™s designed to be flexible, allowing for JSON input from both files and pipes,
   and it handles pointer types for nested structures when specified.

Options:
  -h, --help                      Show this help message and exit
  -v, --version                   Show version.
  -n, --name <root-name>          Specify the RootStruct name (default: AutoGenerated)
  -f, --file <json-file>          Specify the input .json file
  -a, --null-as <null-type-name>  Specify the null-type name. (default: interface{})
  -j, --json <json-string>        Specify the json string
  -p, --pipe                      Receive JSON from a pipe instead of a direct argument above all else. (default: false)
  --pointer <on|off>              Defines struct and array fields as pointers. Only valid for with --outline. (default: off)
  --pager <pager-mode>            Use a pager even if the output size is larger than the terminal. (default: "auto")
  --outline                       Specify output mode. Defines struct and array fields as outline struct. (default: true)
  --inline                        Specify output mode. Defines struct and array fields as inline struct. (default: false)

Arguments:
  <root-name>                     Used as the name of the root struct in the output. Automatically converted to camel case.
  <json-file>                     A file containing a JSON string. It will be read even if the extension is not .json.
  <json-string>                   Direct JSON string input.
  <null-type-name>                The type name used to replace `null` type from json.
  <pager-mode>                    Use a pager even if the output size is larger than the terminal. Only `auto` and `no` are valid.



Environments:
  KIRKE_DEFAULT_ROOT_NAME         Specified default used <root-name>. (default: AutoGenerated)
  KIRKE_DEFAULT_NULL_AS           Specified default used <null-type-name>. (default: interface{})
  KIRKE_DEFAULT_OUTPUT_MODE       Specified the default used output mode. Only `outline` and `inline` are valid. (default: outline)
                                    Used if the `--inline` or `--outline` option is not specified. (invalid value will ignored)
  KIRKE_DEFAULT_PAGER_MODE        Specified default `<pager-mode>`. Only `auto` and `no` are valid.(default: "auto")
  KIRKE_DEFAULT_POINTER_MODE      Specified default `<pointer-mode>`. Only `on` and `off` are valid.(default: "off")


Examples:
    ex1)
        kirke -j '{"key": "value"}' --pager no --name MyStruct
    ex2)
        kirke -f ./path/to/example.json --name MyExample
    ex3)
        echo '{"key": "value"}' | kirke --pipe --pointer on
    ex4)
        echo '{"key": "value"}' | kirke --pipe --pointer on -j '{"key2": "value2"}'
    ex5)
        echo '{"key": "value", "obj": {"num": 1} }' | kirke -a "*string"


See Also:
  https://github.com/magicdrive/kirke/README.md

