package commandline_test

import (
	"testing"

	"github.com/magicdrive/kirke/internal/commandline"
)

// Helper function to compare only relevant fields in Option
func compareOptions(t *testing.T, expected, result *commandline.Option) {
	t.Helper()
	if expected.RootObjName != result.RootObjName {
		t.Errorf("Expected RootObjName %q, got %q", expected.RootObjName, result.RootObjName)
	}
	if expected.Json != result.Json {
		t.Errorf("Expected Json %q, got %q", expected.Json, result.Json)
	}
	if expected.InputPath != result.InputPath {
		t.Errorf("Expected InputPath %q, got %q", expected.InputPath, result.InputPath)
	}
	if expected.WithPointerFlag != result.WithPointerFlag {
		t.Errorf("Expected WithPointerFlag %v, got %v", expected.WithPointerFlag, result.WithPointerFlag)
	}
	if expected.HelpFlag != result.HelpFlag {
		t.Errorf("Expected HelpFlag %v, got %v", expected.HelpFlag, result.HelpFlag)
	}
	if expected.VersionFlag != result.VersionFlag {
		t.Errorf("Expected VersionFlag %v, got %v", expected.VersionFlag, result.VersionFlag)
	}
	if expected.PipeFlag != result.PipeFlag {
		t.Errorf("Expected PipeFlag %v, got %v", expected.PipeFlag, result.PipeFlag)
	}
	if expected.NoPagerFlag != result.NoPagerFlag {
		t.Errorf("Expected NoPagerFlag %v, got %v", expected.NoPagerFlag, result.NoPagerFlag)
	}
}

func TestOptParse_NoArgs(t *testing.T) {
	args := []string{}
	expected := &commandline.Option{
		RootObjName:     "AutoGenerated",
		Json:            "",
		InputPath:       "",
		WithPointerFlag: false,
		HelpFlag:        false,
		VersionFlag:     false,
		PipeFlag:        false,
		NoPagerFlag:     false,
	}

	_, result, err := commandline.OptParse(args)
	if err != nil {
		t.Fatalf("Expected no error, got %v", err)
	}

	// Compare only the relevant fields
	compareOptions(t, expected, result)
}

func TestOptParse_WithFlags(t *testing.T) {
	args := []string{
		"-n", "TestStruct",
		"-j", `{"key": "value"}`,
		"-f", "input.json",
		"--with-pointer",
		"--help",
		"--version",
		"--pipe",
		"--no-pager",
	}
	expected := &commandline.Option{
		RootObjName:     "TestStruct",
		Json:            `{"key": "value"}`,
		InputPath:       "input.json",
		WithPointerFlag: true,
		HelpFlag:        true,
		VersionFlag:     true,
		PipeFlag:        true,
		NoPagerFlag:     true,
	}

	_, result, err := commandline.OptParse(args)
	if err != nil {
		t.Fatalf("Expected no error, got %v", err)
	}

	// Compare only the relevant fields
	compareOptions(t, expected, result)
}
