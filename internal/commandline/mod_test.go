package commandline_test

import (
	"os"
	"testing"

	"github.com/magicdrive/kirke/internal/commandline"
)

// Helper function to compare only relevant fields in Option
func compareOptions(t *testing.T, expected, result *commandline.Option) {
	t.Helper()
	if expected.RootObjName != result.RootObjName {
		t.Errorf("Expected RootObjName %q, got %q", expected.RootObjName, result.RootObjName)
	}
	if expected.Json != result.Json {
		t.Errorf("Expected Json %q, got %q", expected.Json, result.Json)
	}
	if expected.FilePath != result.FilePath {
		t.Errorf("Expected FilePath %q, got %q", expected.FilePath, result.FilePath)
	}
	if expected.NullAs != result.NullAs {
		t.Errorf("Expected NullAs %q, got %q", expected.NullAs, result.NullAs)
	}
	if expected.PointerStructMode != result.PointerStructMode {
		t.Errorf("Expected PointerStructMode %v, got %v", expected.PointerStructMode, result.PointerStructMode)
	}
	if expected.HelpFlag != result.HelpFlag {
		t.Errorf("Expected HelpFlag %v, got %v", expected.HelpFlag, result.HelpFlag)
	}
	if expected.VersionFlag != result.VersionFlag {
		t.Errorf("Expected VersionFlag %v, got %v", expected.VersionFlag, result.VersionFlag)
	}
	if expected.ForcePipeFlag != result.ForcePipeFlag {
		t.Errorf("Expected PipeFlag %v, got %v", expected.ForcePipeFlag, result.ForcePipeFlag)
	}
	if expected.AutoPagerMode != result.AutoPagerMode {
		t.Errorf("Expected AutoPagerMode %v, got %v", expected.AutoPagerMode, result.AutoPagerMode)
	}
	if expected.DefaultOutputMode != result.DefaultOutputMode {
		t.Errorf("Expected DefaultOutputMode %v, got %v", expected.DefaultOutputMode, result.DefaultOutputMode)
	}
}

func TestOptParse_NoArgs(t *testing.T) {
	args := []string{}
	expected := &commandline.Option{
		RootObjName:       "AutoGenerated",
		Json:              "",
		FilePath:          "",
		NullAs:            "interface{}",
		PointerStructMode: "off",
		HelpFlag:          false,
		VersionFlag:       false,
		ForcePipeFlag:     false,
		AutoPagerMode:     "on",
		InlineFlag:        false,
		OutlineFlag:       true,
		DefaultOutputMode: "",
	}

	_, result, err := commandline.OptParse(args)
	if err != nil {
		t.Fatalf("Expected no error, got %v", err)
	}

	// Compare only the relevant fields
	compareOptions(t, expected, result)
}

func TestOptParse_WithFlags(t *testing.T) {
	args := []string{
		"-n", "TestStruct",
		"-j", `{"key": "value"}`,
		"-f", "input.json",
		"-a", "any",
		"--pointer", "on",
		"--help",
		"--version",
		"--pipe",
		"--pager", "off",
	}
	expected := &commandline.Option{
		RootObjName:       "TestStruct",
		Json:              `{"key": "value"}`,
		FilePath:          "input.json",
		NullAs:            "any",
		PointerStructMode: "on",
		HelpFlag:          true,
		VersionFlag:       true,
		ForcePipeFlag:     true,
		AutoPagerMode:     "off",
		InlineFlag:        true,
		OutlineFlag:       true,
		DefaultOutputMode: "",
	}

	_, result, err := commandline.OptParse(args)
	if err != nil {
		t.Fatalf("Expected no error, got %v", err)
	}

	// Compare only the relevant fields
	compareOptions(t, expected, result)
}

func TestOptParse_WithEnviroments(t *testing.T) {

	os.Setenv("KIRKE_DEFAULT_NULL_AS", "any")
	os.Setenv("KIRKE_DEFAULT_POINTER_STRUCT_MODE", "on")
	os.Setenv("KIRKE_DEFAULT_ROOT_NAME", "MyJsonStruct")
	os.Setenv("KIRKE_DEFAULT_OUTPUT_MODE", "inline")
	os.Setenv("KIRKE_DEFAULT_AUTO_PAGER_MODE", "off")
	defer func() {
		os.Unsetenv("KIRKE_DEFAULT_NULL_AS")
		os.Unsetenv("KIRKE_DEFAULT_POINTER_STRUCT_MODE")
		os.Unsetenv("KIRKE_DEFAULT_ROOT_NAME")
		os.Unsetenv("KIRKE_DEFAULT_OUTPUT_MODE")
		os.Unsetenv("KIRKE_DEFAULT_AUTO_PAGER_MODE")
	}()

	args := []string{}
	expected := &commandline.Option{
		RootObjName:       "MyJsonStruct",
		Json:              "",
		FilePath:          "",
		NullAs:            "any",
		PointerStructMode: "on",
		HelpFlag:          false,
		VersionFlag:       false,
		ForcePipeFlag:     false,
		AutoPagerMode:     "off",
		InlineFlag:        false,
		OutlineFlag:       false,
		DefaultOutputMode: "inline",
	}

	_, result, err := commandline.OptParse(args)
	if err != nil {
		t.Fatalf("Expected no error, got %v", err)
	}

	// Compare only the relevant fields
	compareOptions(t, expected, result)
}
